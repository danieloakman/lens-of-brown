#! bun
import { $ } from 'bun';
import { statSync } from 'fs';
import { writeFile } from 'fs/promises';
import { globIterateSync } from 'glob';
import { iter } from 'iteragain';
import { join, relative } from 'path';

const filesIn = (glob: string, rootPath: string) =>
	iter(globIterateSync(glob)).filterMap((file) => {
		const s = statSync(file);
		if (!s.isFile()) return;
		return relative(rootPath, file);
	});

if (import.meta.main) {
	const rootPath = join(import.meta.dir, '..');
	const assetConstantsPath = join(rootPath, 'src/lib/constants/assets.ts');
	const imgsPath = join(rootPath, 'src/lib/imgs');
	const staticPath = join(rootPath, 'static');
	const paths: string[] = filesIn(join(imgsPath, '**/*'), imgsPath)
		.map((s) => `$imgs/${s}`)
		.concat(filesIn(join(staticPath, '**/*'), staticPath).map((s) => `$static/${s}`))
		.sort((a, b) => a.localeCompare(b))
		.toArray();
	if (!paths.length) {
		console.warn('No images found');
		process.exit(0);
	}
	console.log(`Writing ${paths.length} asset paths to ${relative(rootPath, assetConstantsPath)}`);
	await writeFile(
		assetConstantsPath,
		`
// This file is generated by scripts/postinstall.ts
type ASSET = ${paths.map((str) => `'${str}'`).join(' | ')};
export type ASSET_PATH = \`\${ASSET}\${'' | '?url' | '?enhanced'}\`;
	`.trimStart()
	);
	await $`prettier --write ${assetConstantsPath}`;
}
